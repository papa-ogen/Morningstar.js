{"version":3,"sources":["../src/Vector.js","../src/Calc.js","../src/Canvas.js","../src/index.js","classes/Bullet.js","classes/Tank.js","classes/Circle.js","classes/Particle.js","6.js"],"names":["Vector","x","y","_x","_y","vectorLimit","undefined","factor","factor2","limit","limit2","x2","y2","Math","atan2","Calc","n","min","max","random","z","x1","y1","hypot","angle","PI","r1","r2","abs","rect1","rect2","width","height","cX","cY","cR","rX","rY","rW","rH","distX","distY","dx","dy","floor","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInElastic","sin","easeOutElastic","easeInOutElastic","Canvas","config","bgColor","fps","hook","appendToBody","canvas","document","querySelector","ctx","getContext","canvasPosition","getBoundingClientRect","stop","c","createElement","appendElement","body","style","background","append","color","strokeWidth","strokeColor","shadow","rotate","fillStyle","strokeStyle","addShadow","translate","fillRect","setTransform","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","r","arc","stroekeWidth","fill","src","sx","sy","sWidth","sHeight","drawImage","offsetX","offsetY","blur","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fontSize","font","text","sizeFactor","textLength","center","measureText","fillText","time","clearRect","render","setTimeout","window","requestAnimationFrame","init","bind","Bullet","ms","pos","velocity","bullets","splice","Tank","turret","isMoving","dir","bullet","push","barrelDebree","rect","Circle","morningstar","vel","acc","acceleration","objects","object","movingCircleCollision","c1","c2","combinedRadii","overlap","xSide","ySide","s","p1A","p1B","p2A","p2B","mass","vx","cos","vy","magnitude","sqrt","vxHalf","vyHalf","lx","ly","dp1","dp2","dp3","dp4","bounce","vx2","vy2","deltaX","deltaY","deltaX2","deltaY2","circles","collidedCircle","collision","contactPoint","createVector","contactAngle","circleCollisionPoint","collisionX","collisionY","createParticles","destroy","health","reflectionAngleTopBottom","Particle","position","_position","alpha","SquareParticle","CircleParticle","radius","BallsAndTanks","particles","colors","tank","addEventListener","e","keyCode","shoot","setInterval","createCircle","grd","createLinearGradient","addColorStop","i","create3DVector","bg","update","particle","stopAnimation"],"mappings":"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","file":"6.1e5d2c8f.js","sourceRoot":"../examples","sourcesContent":["export default class Vector {\n  constructor(x, y) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this.vectorLimit = undefined;\n  }\n\n  set x(x) {\n    this._x =\n      this.vectorLimit && x > this.vectorLimit.x ? this.vectorLimit.x : x;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set y(y) {\n    this._y =\n      this.vectorLimit && y > this.vectorLimit.y ? this.vectorLimit.y : y;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  mult(factor, factor2 = undefined) {\n    this.x *= factor;\n    this.y *= factor2 || factor;\n  }\n\n  div(factor, factor2 = undefined) {\n    this.x /= factor;\n    this.y /= factor2 || factor;\n  }\n\n  add(factor, factor2 = undefined) {\n    this.x += factor;\n    this.y += factor2 || factor;\n  }\n\n  sub(factor, factor2 = undefined) {\n    this.x -= factor;\n    this.y -= factor2 || factor;\n  }\n\n  limit(limit, limit2 = undefined) {\n    this.vectorLimit = {\n      x: limit,\n      y: limit2 || limit\n    };\n\n    this.x = this.x > this.vectorLimit.x ? this.vectorLimit.x : this.x;\n    this.y = this.y > this.vectorLimit.y ? this.vectorLimit.y : this.y;\n  }\n\n  unLimit() {\n    this.vectorLimit = undefined;\n  }\n\n  heading(x2, y2) {\n    return Math.atan2(y2 - this.y, x2 - this.x);\n  }\n}\n","import Vector from './Vector'\n\nexport default class Calc {\n  constructor() { }\n\n  static constrain(n, min, max) {\n    return n < min ? min : n && n > max ? max : n;\n  }\n\n  static createVector(x, y) {\n    return new Vector(x, y);\n  }\n\n  static createRandomVector() {\n    const x = Math.random() > 0.5 ? Math.random() : -Math.random();\n    const y = Math.random() > 0.5 ? Math.random() : -Math.random();\n\n    return new Vector(x, y);\n  }\n\n  static create3DVector(x = 0, y = 0, z = 0) {\n    return { x, y, z }\n  }\n\n  static dist(x1, y1, x2, y2) {\n    return Math.hypot(x2 - x1, y2 - y1);\n  }\n\n  static heading(x1, y1, x2, y2) {\n    return Math.atan2(y2 - y1, x2 - x1);\n  }\n\n  static toDegrees(angle) {\n    return angle * (180 / Math.PI);\n  }\n\n  static toRadians(angle) {\n    return angle * (Math.PI / 180);\n  }\n\n  static invertAngle(angle) {\n    return (angle + Math.PI) % (2 * Math.PI);\n  }\n\n  static circlesCollide(x1, y1, r1, x2, y2, r2) {\n    return Math.abs((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) < (r1 + r2) * (r1 + r2);\n  }\n\n  static rectangleCollide(rect1, rect2) {\n    return (rect1.x < rect2.x + rect2.width &&\n      rect1.x + rect1.width > rect2.x &&\n      rect1.y < rect2.y + rect2.height &&\n      rect1.y + rect1.height > rect2.y)\n  }\n\n  static circleRectangleCollide(cX, cY, cR, rX, rY, rW, rH) {\n    const distX = Math.abs(cX - rX - rW / 2);\n    const distY = Math.abs(cY - rY - rH / 2);\n\n    if (distX > (rW / 2 + cR)) { return false; }\n    if (distY > (rH / 2 + cR)) { return false; }\n\n    if (distX <= (rW / 2)) { return true; }\n    if (distY <= (rH / 2)) { return true; }\n\n    const dx = distX - rW / 2;\n    const dy = distY - rH / 2;\n    return (dx * dx + dy * dy <= (cR * cR));\n  }\n\n  static random(min = 0, max = 255) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  static easingFunctions() {\n    return {\n      // no easing, no acceleration\n      linear: function (t) { return t },\n      // accelerating from zero velocity\n      easeInQuad: function (t) { return t * t },\n      // decelerating to zero velocity\n      easeOutQuad: function (t) { return t * (2 - t) },\n      // acceleration until halfway, then deceleration\n      easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t },\n      // accelerating from zero velocity \n      easeInCubic: function (t) { return t * t * t },\n      // decelerating to zero velocity \n      easeOutCubic: function (t) { return (--t) * t * t + 1 },\n      // acceleration until halfway, then deceleration \n      easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1 },\n      // accelerating from zero velocity \n      easeInQuart: function (t) { return t * t * t * t },\n      // decelerating to zero velocity \n      easeOutQuart: function (t) { return 1 - (--t) * t * t * t },\n      // acceleration until halfway, then deceleration\n      easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t },\n      // accelerating from zero velocity\n      easeInQuint: function (t) { return t * t * t * t * t },\n      // decelerating to zero velocity\n      easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t },\n      // acceleration until halfway, then deceleration \n      easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t }\n    }\n  }\n\n  static elasticEasingFunctions() {\n    return {\n      // elastic bounce effect at the beginning\n      easeInElastic: function (t) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n      // elastic bounce effect at the end\n      easeOutElastic: function (t) { return .04 * t / (--t) * Math.sin(25 * t) },\n      // elastic bounce effect at the beginning and end\n      easeInOutElastic: function (t) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n    }\n  }\n}\n","export default class Canvas {\n  constructor(config = {}) {\n    this.width = config.width || 600\n    this.height = config.height || 600\n    this.bgColor = config.bgColor || 'none'\n    this.fps = config.fps || 60\n    this.hook = config.hook\n\n    this.appendToBody()\n\n    this.canvas = document.querySelector('canvas')\n    this.ctx = this.canvas.getContext(\"2d\")\n    this.canvasPosition = this.canvas.getBoundingClientRect()\n    this.stop = false\n  }\n\n  appendToBody() {\n    const c = document.createElement('canvas')\n    let appendElement = document.body\n    c.width = this.width\n    c.height = this.height\n    c.style.background = this.bgColor\n\n    if (this.hook) {\n      appendElement = document.querySelector(this.hook)\n    }\n\n    appendElement.append(c)\n  }\n\n  startAnimation(stop = false) {\n    this.stop = stop\n  }\n\n  stopAnimation(stop = true) {\n    this.stop = stop\n  }\n\n  rect({ x, y, width, height, color = '#000', strokeWidth, strokeColor, shadow, rotate }) {\n    this.ctx.fillStyle = color;\n\n    if (strokeWidth) {\n      this.ctx.strokeWidth = strokeWidth\n      this.ctx.strokeStyle = strokeColor;\n    }\n\n    if (shadow) {\n      this.addShadow(shadow)\n    }\n\n    if (rotate) {\n      this.ctx.translate(x + width / 2, y + height / 2);\n      this.ctx.rotate(rotate);\n      this.ctx.fillRect(-width / 2, -height / 2, width, height);\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n      return\n    }\n\n    this.ctx.fillRect(x, y, width, height);\n  }\n\n  line({ x1, y1, x2, y2, lineWidth = 1, shadow, color = '#fff' }) {\n    this.ctx.beginPath();\n\n    if (shadow) {\n      this.addShadow(shadow)\n    }\n\n    this.ctx.moveTo(x1, y1);\n    this.ctx.lineTo(x2, y2);\n    this.ctx.lineWidth = lineWidth;\n    this.ctx.strokeStyle = color;\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n\n  arc({ x, y, r, color, strokeWidth, strokeColor }) {\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, r, 0, Math.PI * 2, true);\n\n    if (strokeWidth) {\n      this.ctx.stroekeWidth = strokeWidth\n      this.ctx.strokeStyle = strokeColor\n      this.ctx.stroke();\n    }\n\n    if (color) {\n      this.ctx.fillStyle = color;\n      this.ctx.fill();\n    }\n  }\n\n  createImage({ src, sx, sy, sWidth, sHeight, x, y, width, height }) {\n    if (!width && !height) {\n      this.ctx.drawImage(src, x, y);\n\n      return;\n    } else if (width && height && !sx && !sy && !sWidth && !sHeight) {\n      this.ctx.drawImage(src, x, y, width, height);\n\n      return;\n    }\n\n    this.ctx.drawImage(src, sx, sy, sWidth, sHeight, x, y, width, height);\n  }\n\n  addShadow({ offsetX = 2, offsetY = 2, blur = 2, color = 'rgba(0, 0, 0, 0.5)' }) {\n    this.ctx.shadowOffsetX = offsetX;\n    this.ctx.shadowOffsetY = offsetY;\n    this.ctx.shadowBlur = blur;\n    this.ctx.shadowColor = color;\n  }\n\n  text({ x, y, fontSize = 12, font = 'serif', color = '#fff', text, center }) {\n    const sizeFactor = fontSize >= 50 ? 1.2 : 0.8 // Todo: refine\n    const textLength = center ? (this.ctx.measureText(text).width / 2) * sizeFactor : 0;\n    this.ctx.font = `${fontSize}px ${font}`;\n    this.ctx.fillStyle = color;\n    this.ctx.fillText(text, x - textLength, y);\n  }\n\n  init(time = 0) {\n    this.time = time\n\n    if (!this.stop) {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.render(time)\n\n      setTimeout(() => {\n        window.requestAnimationFrame(this.init.bind(this));\n      }, 1000 / this.fps);\n    }\n  }\n\n  render(time) {\n    // extend Canvas and overwrite\n  }\n}\n\n\n// img.setAttribute('width', '100%');\n// img.setAttribute('height', '100%');","import Calc from './Calc'\nimport Canvas from './Canvas'\nimport Vector from './Vector'\n\nexport {\n  Calc,\n  Canvas,\n  Vector\n}","export class Bullet {\n  constructor(ms, pos, r) {\n    this.ms = ms\n    this.r = r\n    this.x = pos.x\n    this.y = pos.y\n    this.velocity = 10\n  }\n\n  destroy() {\n    this.ms.bullets.splice(this, 1)\n  }\n\n  render() {\n    const { ms, x, y, r } = this\n    ms.arc({ x, y, r, color: 'red' })\n    this.x -= this.velocity\n  }\n}\n","import { Bullet } from '../classes/Bullet'\n\nexport class Tank {\n  constructor(ms, x, y, width, height) {\n    this.ms = ms\n    this.x = x\n    this.y = y\n    this.width = width\n    this.height = height\n    this.turret = {\n      x: this.x - 30,\n      y: this.y + this.height / 2 - 10,\n      width: 30,\n      height: 20\n    }\n    this.velocity = 10\n    this.isMoving = false\n    this.dir = 1\n\n  }\n\n  shoot() {\n    const { ms, x, y } = this.turret\n    const r = 10\n    const bullet = new Bullet(this.ms, { x, y: y + r }, r)\n    this.ms.bullets.push(bullet)\n    this.ms.barrelDebree(x, y + r)\n  }\n\n  render() {\n    const { ms, x, y, width, height, isMoving, dir, velocity } = this\n\n    if (isMoving) {\n      if (dir === 1 && y > 0) {\n        this.y -= velocity\n        this.turret.y -= velocity\n      } else if (dir === 0 && y + height < ms.canvas.height) {\n        this.y += velocity\n        this.turret.y += velocity\n      }\n    }\n\n    ms.rect({ x, y, width, height, color: '#fff' })\n    ms.rect({ x: this.turret.x, y: this.turret.y, width: this.turret.width, height: this.turret.height, color: '#fff' })\n  }\n}\n","import { Calc } from '../../src'\n\nexport class Circle {\n  constructor(morningstar, pos, r, vel, acc, angle, color) {\n    this.ctx = morningstar.ctx\n    this.ms = morningstar\n    this.x = pos.x\n    this.y = pos.y\n    this.velocity = vel\n    this.acceleration = acc\n    this.r = r\n    this.angle = angle\n    this.color = color\n  }\n\n  reflectionAngleLeftRight(angle) {\n    return Math.PI - angle\n  }\n\n  reflectionAngleTopBottom(angle) {\n    return -angle\n  }\n\n  collision(objects) {\n    for (const object of objects) {\n      if (object === this) break\n      if (this.movingCircleCollision(this, object)) {\n        return object\n      }\n    }\n\n    return false\n  }\n\n  circleCollisionPoint(x1, y1, r1, x2, y2, r2) {\n    const collisionPointX = ((x1 * r2) + (x2 * r1)) / (r1 + r2);\n    const collisionPointY = ((y1 * r2) + (y2 * r1)) / (r1 + r2);\n\n    return [collisionPointX, collisionPointY]\n  }\n\n  movingCircleCollision(c1, c2) {\n    let combinedRadii,\n      overlap,\n      xSide,\n      ySide,\n      s = {},\n      p1A = {},\n      p1B = {},\n      p2A = {},\n      p2B = {};\n\n    c1.mass = c1.mass || 1;\n    c2.mass = c2.mass || 1;\n    c1.vx = c1.x + Math.cos(c1.angle) * c1.velocity\n    c1.vy = c1.y + Math.sin(c1.angle) * c1.velocity\n    c2.vx = c2.x + Math.cos(c2.angle) * c2.velocity\n    c2.vy = c2.y + Math.sin(c2.angle) * c2.velocity\n\n    s.vx = c2.x - c1.x;\n    s.vy = c2.y - c1.y;\n\n    s.magnitude = Math.sqrt(s.vx * s.vx + s.vy * s.vy);\n    combinedRadii = c1.r + c2.r;\n\n    if (s.magnitude < combinedRadii) {\n      overlap = combinedRadii - s.magnitude;\n      overlap += 0.3;\n\n      // Normalize vector\n      s.dx = s.vx / s.magnitude;\n      s.dy = s.vy / s.magnitude;\n\n      s.vxHalf = Math.abs(s.dx * overlap / 2);\n      s.vyHalf = Math.abs(s.dy * overlap / 2);\n\n      c1.x > c2.x ? (xSide = 1) : (xSide = -1);\n      c1.y > c2.y ? (ySide = 1) : (ySide = -1);\n\n      c1.x = c1.x + s.vxHalf * xSide;\n      c1.y = c1.y + s.vyHalf * ySide;\n\n      c2.x = c2.x + s.vxHalf * -xSide;\n      c2.y = c2.y + s.vyHalf * -ySide;\n\n      s.lx = s.vy;\n      s.ly = -s.vx;\n\n      let dp1 = c1.vx * s.dx + c1.vy * s.dy;\n      p1A.x = dp1 * s.dx;\n      p1A.y = dp1 * s.dy;\n\n      let dp2 = c1.vx * (s.lx / s.magnitude) + c1.vy * (s.ly / s.magnitude);\n      p1B.x = dp2 * (s.lx / s.magnitude);\n      p1B.y = dp2 * (s.ly / s.magnitude);\n\n      let dp3 = c2.vx * s.dx + c2.vy * s.dy;\n      p2A.x = dp3 * s.dx;\n      p2A.y = dp3 * s.dy;\n\n      let dp4 = c2.vx * (s.lx / s.magnitude) + c2.vy * (s.ly / s.magnitude);\n      p2B.x = dp4 * (s.lx / s.magnitude);\n      p2B.y = dp4 * (s.ly / s.magnitude);\n\n      c1.bounce = {};\n      c1.bounce.x = p1B.x + p2A.x;\n      c1.bounce.y = p1B.y + p2A.y;\n\n      c2.bounce = {};\n      c2.bounce.x = p1A.x + p2B.x;\n      c2.bounce.y = p1A.y + p2B.y;\n\n      const vx = c1.bounce.x / c1.mass;\n      const vy = c1.bounce.y / c1.mass;\n      const vx2 = c2.bounce.x / c2.mass;\n      const vy2 = c2.bounce.y / c2.mass;\n      const deltaX = vx - c1.x;\n      const deltaY = vy - c1.y;\n      const deltaX2 = vx2 - c2.x;\n      const deltaY2 = vy2 - c2.y;\n      c2.angle = Math.atan2(deltaY, deltaX);\n      c1.angle = Math.atan2(deltaY2, deltaX2);\n\n      return true;\n    }\n  }\n\n  destroy() {\n    this.ms.circles.splice(this, 1)\n  }\n\n  update(objects) {\n    const { ms, x, y, r, color } = this\n    const collidedCircle = this.collision(objects)\n\n    if (collidedCircle) {\n      const { x: x2, y: y2, r: r2 } = collidedCircle\n      const contactPoint = Calc.createVector((x + x2) * 0.5, (y + y2) * 0.5)\n      const contactAngle = Math.atan2(x2 - contactPoint.x, y2 - contactPoint.y)\n\n      this.angle = Math.sin(contactAngle)\n      collidedCircle.angle = Math.cos(contactAngle)\n\n\n      // EXPLODE\n      const [collisionX, collisionY] = this.circleCollisionPoint(x, y, r, x2, y2, r2)\n      ms.createParticles(collisionX, collisionY, color)\n\n      collidedCircle.destroy()\n      this.r = this.r / 2\n\n      if (this.r < 1) {\n        this.destroy()\n      }\n    }\n  }\n\n  render() {\n    const { x, y, r, velocity, angle } = this\n    this.x = x + Math.cos(angle) * velocity\n    this.y = y + Math.sin(angle) * velocity\n\n    if (this.x > this.ms.canvas.width - r) {\n      this.ms.health -= 1\n      this.velocity = 0\n      this.destroy()\n    }\n\n    if (this.y > this.ms.canvas.height - r) {\n      this.angle = this.reflectionAngleTopBottom(angle)\n    }\n\n    if (this.y < r) {\n      this.angle = this.reflectionAngleTopBottom(angle)\n    }\n\n    this.ms.arc({ x, y, r, color: this.color })\n  }\n}\n","export class Particle {\n  constructor(morningstar, position, velocity, acceleration, angle) {\n    this.ctx = morningstar.ctx\n    this.ms = morningstar\n    this._position = position\n    this.velocity = velocity\n    this.acc = acceleration\n    this.alpha = 1\n    this.angle = angle\n  }\n\n  setColor(color) {\n    return color\n  }\n\n  set position(position) {\n    const { z } = position\n    if (z > 5) {\n      position.z = 3\n    }\n    this._position = position\n  }\n\n  get position() {\n    return this._position\n  }\n}\n\nexport class SquareParticle extends Particle {\n  constructor(morningstar, position, width, height, color, velocity, acceleration, angle) {\n    super(morningstar, position, velocity, acceleration, angle)\n    this.width = width\n    this.height = height\n    this.color = color\n  }\n\n  render() {\n    const { position, width, height, color, alpha, angle, velocity } = this\n    this.ms.rect({ ...position, width, height, color: `rgba(100, 100, 0, ${alpha})` })\n    this.alpha -= 0.01\n\n    this.position.x = this.position.x + Math.cos(angle) * velocity\n    this.position.y = this.position.y + Math.sin(angle) * velocity\n\n    this.velocity += this.acc\n  }\n}\n\nexport class CircleParticle extends Particle {\n  constructor(morningstar, position, r, velocity, acceleration, angle) {\n    super(morningstar, position, velocity, acceleration, angle)\n    this.r = r\n  }\n\n  render(time) {\n    const { position, r, alpha, angle, velocity } = this\n    const radius = Math.sin(time / 200) + r\n\n    this.ms.arc({ ...position, r: radius, color: `rgba(255, 100, 0, ${alpha})` })\n    this.alpha -= 0.01\n\n    this.position.x = this.position.x + Math.cos(angle) * velocity\n    this.position.y = this.position.y + Math.sin(angle) * velocity\n\n    this.velocity += this.acc\n  }\n}","import { Canvas, Calc } from '../src'\nimport { Tank } from './classes/Tank'\nimport { Circle } from './classes/Circle'\nimport { SquareParticle } from './classes/Particle'\n\nclass BallsAndTanks extends Canvas {\n  constructor() {\n    super({ fps: 60, bgColor: 'rgb(50, 50, 50)', width: 800, height: 600, hook: '.main' })\n\n    this.circles = []\n    this.bullets = []\n    this.particles = []\n    this.colors = [\n      'rgb(200, 148, 82)',\n      'rgb(193, 200, 82)',\n      'rgb(134, 200, 82)',\n      'rgb(82, 200, 89)',\n      'rgb(82, 200, 148)',\n      'rgb(82, 193, 200)',\n    ]\n    this.health = 20\n\n    this.tank = new Tank(\n      this,\n      this.canvas.width - 30,\n      this.canvas.height / 2 - 50,\n      50,\n      100\n    )\n\n    window.addEventListener(\"keydown\", (e) => {\n      if (e.keyCode === 38) {\n        this.tank.isMoving = true\n        this.tank.dir = 1\n      }\n\n      if (e.keyCode === 40) {\n        this.tank.isMoving = true\n        this.tank.dir = 0\n      }\n    })\n\n    window.addEventListener('keyup', (e) => {\n      if (e.keyCode === 32) {\n        this.tank.shoot()\n      }\n\n      this.tank.isMoving = false\n\n    }, false)\n\n    setInterval(() => {\n      this.createCircle()\n    }, 1000)\n\n    this.init()\n  }\n\n  bg() {\n    var grd = this.ctx.createLinearGradient(0, this.canvas.height, 0, 0);\n    grd.addColorStop(0, \"#1f3342\");\n    grd.addColorStop(1, \"black\");\n\n    this.ctx.fillStyle = grd;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  createCircle() {\n    const angle = 0\n    const r = Calc.random(10, 20)\n    const pos = Calc.createVector(-r, Calc.random(r, this.height - r))\n    const velocity = Calc.random(1, 3)\n    const acceleration = Math.random()\n    const color = Calc.random(0, 5)\n    this.circles.push(new Circle(this, pos, r, velocity, acceleration, angle, this.colors[color]))\n  }\n\n  createCircles() {\n    for (let i = 0; i < 3; i++) {\n      this.createCircle()\n    }\n  }\n\n  createParticles(x, y, color = 'red') {\n    for (let i = 0; i < 100; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const velocity = Math.random()\n      const acceleration = Math.random() / 50\n      const vx = x + Math.cos(angle) * velocity\n      const vy = y + Math.sin(angle) * velocity\n      const r = Calc.random(1, 5)\n\n      this.particles.push(new SquareParticle(this, Calc.create3DVector(vx, vy), r, r, color, velocity, acceleration, angle))\n    }\n  }\n\n  barrelDebree(x, y, color = 'red') {\n    for (let i = 0; i < 100; i++) {\n      const angle = Math.random() * Math.PI;\n      const velocity = Math.random()\n      const acceleration = Math.random() / 50\n      const vx = x + Math.cos(angle) * velocity\n      const vy = y + Math.sin(angle) * velocity\n      const r = Calc.random(1, 5)\n\n      this.particles.push(new SquareParticle(this, Calc.create3DVector(vx, vy), r, r, color, velocity, acceleration, angle))\n    }\n  }\n\n  render() {\n    this.bg()\n\n    for (const bullet of this.bullets) {\n      bullet.render()\n    }\n\n    this.tank.render()\n\n    for (const circle of this.circles) {\n      circle.render()\n    }\n\n    for (const circle of this.circles) {\n      circle.update(this.bullets)\n    }\n\n    for (const particle of this.particles) {\n      if (particle.alpha <= 0) {\n        this.particles.splice(particle, 1)\n        continue\n      }\n\n      particle.render()\n    }\n\n    this.text({\n      x: 17,\n      y: 48,\n      fontSize: 44,\n      text: `Health: ${this.health}`,\n      center: false\n    })\n\n    if (this.health <= 0) {\n      this.text({\n        x: this.canvas.width / 2,\n        y: this.canvas.height / 2,\n        fontSize: 68,\n        text: 'Game Over',\n        center: true\n      })\n\n      this.stopAnimation()\n    }\n  }\n}\n\nnew BallsAndTanks\n"]}