{"version":3,"sources":["../src/Vector.js","../src/Calc.js","../src/Canvas.js","../src/index.js","classes/Particle.js","4.js"],"names":["Vector","x","y","_x","_y","vectorLimit","undefined","factor","factor2","limit","limit2","x2","y2","Math","atan2","Calc","x1","y1","r1","r2","abs","n","min","max","random","z","hypot","angle","PI","floor","linear","t","easeInQuad","easeOutQuad","easeInOutQuad","easeInCubic","easeOutCubic","easeInOutCubic","easeInQuart","easeOutQuart","easeInOutQuart","easeInQuint","easeOutQuint","easeInOutQuint","easeInElastic","sin","easeOutElastic","easeInOutElastic","Canvas","config","width","height","bgColor","fps","hook","appendToBody","canvas","document","querySelector","ctx","getContext","canvasPosition","getBoundingClientRect","stop","c","createElement","appendElement","body","style","background","append","color","strokeWidth","strokeColor","shadow","rotate","fillStyle","strokeStyle","addShadow","translate","fillRect","setTransform","lineWidth","beginPath","moveTo","lineTo","stroke","closePath","r","arc","stroekeWidth","fill","offsetX","offsetY","blur","shadowOffsetX","shadowOffsetY","shadowBlur","shadowColor","fontSize","font","text","sizeFactor","textLength","center","measureText","fillText","time","clearRect","render","setTimeout","window","requestAnimationFrame","init","bind","Particle","morningstar","position","velocity","acceleration","ms","_position","acc","alpha","SquareParticle","rect","cos","CircleParticle","radius","Circle","pos","vel","circles","circle","movingCircleCollision","dx","dy","radii","c1","c2","combinedRadii","overlap","xSide","ySide","s","p1A","p1B","p2A","p2B","mass","vx","vy","magnitude","sqrt","vxHalf","vyHalf","lx","ly","dp1","dp2","dp3","dp4","bounce","vx2","vy2","deltaX","deltaY","deltaX2","deltaY2","collidedCircle","collision","console","log","circleCollisionPoint","collisionX","collisionY","createParticles","reflectionAngleLeftRight","reflectionAngleTopBottom","Circles","particles","colors","createCircles","grd","createLinearGradient","addColorStop","i","createVector","push","create3DVector","bg","splice","update","particle"],"mappings":"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","file":"4.909a577d.js","sourceRoot":"../examples","sourcesContent":["export default class Vector {\n  constructor(x, y) {\n    this._x = x || 0;\n    this._y = y || 0;\n    this.vectorLimit = undefined;\n  }\n\n  set x(x) {\n    this._x =\n      this.vectorLimit && x > this.vectorLimit.x ? this.vectorLimit.x : x;\n  }\n\n  get x() {\n    return this._x;\n  }\n\n  set y(y) {\n    this._y =\n      this.vectorLimit && y > this.vectorLimit.y ? this.vectorLimit.y : y;\n  }\n\n  get y() {\n    return this._y;\n  }\n\n  mult(factor, factor2 = undefined) {\n    this.x *= factor;\n    this.y *= factor2 || factor;\n  }\n\n  div(factor, factor2 = undefined) {\n    this.x /= factor;\n    this.y /= factor2 || factor;\n  }\n\n  add(factor, factor2 = undefined) {\n    this.x += factor;\n    this.y += factor2 || factor;\n  }\n\n  sub(factor, factor2 = undefined) {\n    this.x -= factor;\n    this.y -= factor2 || factor;\n  }\n\n  limit(limit, limit2 = undefined) {\n    this.vectorLimit = {\n      x: limit,\n      y: limit2 || limit\n    };\n\n    this.x = this.x > this.vectorLimit.x ? this.vectorLimit.x : this.x;\n    this.y = this.y > this.vectorLimit.y ? this.vectorLimit.y : this.y;\n  }\n\n  unLimit() {\n    this.vectorLimit = undefined;\n  }\n\n  heading(x2, y2) {\n    return Math.atan2(y2 - this.y, x2 - this.x);\n  }\n}\n","import Vector from './Vector'\n\nexport default class Calc {\n  constructor() { }\n\n  static constrain(n, min, max) {\n    return n < min ? min : n && n > max ? max : n;\n  }\n\n  static createVector(x, y) {\n    return new Vector(x, y);\n  }\n\n  static createRandomVector() {\n    const x = Math.random() > 0.5 ? Math.random() : -Math.random();\n    const y = Math.random() > 0.5 ? Math.random() : -Math.random();\n\n    return new Vector(x, y);\n  }\n\n  static create3DVector(x = 0, y = 0, z = 0) {\n    return { x, y, z }\n  }\n\n  static dist(x1, y1, x2, y2) {\n    return Math.hypot(x2 - x1, y2 - y1);\n  }\n\n  static heading(x1, y1, x2, y2) {\n    return Math.atan2(y2 - y1, x2 - x1);\n  }\n\n  static toDegrees(angle) {\n    return angle * (180 / Math.PI);\n  }\n\n  static toRadians(angle) {\n    return angle * (Math.PI / 180);\n  }\n\n  static invertAngle(angle) {\n    return (angle + Math.PI) % (2 * Math.PI);\n  }\n\n  circlesCollide(x1, y1, r1, x2, y2, r2) {\n    return Math.abs((x1 - x2) * (x1 - x2) + (y1 - y2) * (y1 - y2)) < (r1 + r2) * (r1 + r2);\n  }\n\n  static random(min = 0, max = 255) {\n    return Math.floor(Math.random() * (max - min)) + min;\n  }\n\n  static easingFunctions() {\n    return {\n      // no easing, no acceleration\n      linear: function (t) { return t },\n      // accelerating from zero velocity\n      easeInQuad: function (t) { return t * t },\n      // decelerating to zero velocity\n      easeOutQuad: function (t) { return t * (2 - t) },\n      // acceleration until halfway, then deceleration\n      easeInOutQuad: function (t) { return t < .5 ? 2 * t * t : -1 + (4 - 2 * t) * t },\n      // accelerating from zero velocity \n      easeInCubic: function (t) { return t * t * t },\n      // decelerating to zero velocity \n      easeOutCubic: function (t) { return (--t) * t * t + 1 },\n      // acceleration until halfway, then deceleration \n      easeInOutCubic: function (t) { return t < .5 ? 4 * t * t * t : (t - 1) * (2 * t - 2) * (2 * t - 2) + 1 },\n      // accelerating from zero velocity \n      easeInQuart: function (t) { return t * t * t * t },\n      // decelerating to zero velocity \n      easeOutQuart: function (t) { return 1 - (--t) * t * t * t },\n      // acceleration until halfway, then deceleration\n      easeInOutQuart: function (t) { return t < .5 ? 8 * t * t * t * t : 1 - 8 * (--t) * t * t * t },\n      // accelerating from zero velocity\n      easeInQuint: function (t) { return t * t * t * t * t },\n      // decelerating to zero velocity\n      easeOutQuint: function (t) { return 1 + (--t) * t * t * t * t },\n      // acceleration until halfway, then deceleration \n      easeInOutQuint: function (t) { return t < .5 ? 16 * t * t * t * t * t : 1 + 16 * (--t) * t * t * t * t }\n    }\n  }\n\n  static elasticEasingFunctions() {\n    return {\n      // elastic bounce effect at the beginning\n      easeInElastic: function (t) { return (.04 - .04 / t) * Math.sin(25 * t) + 1 },\n      // elastic bounce effect at the end\n      easeOutElastic: function (t) { return .04 * t / (--t) * Math.sin(25 * t) },\n      // elastic bounce effect at the beginning and end\n      easeInOutElastic: function (t) { return (t -= .5) < 0 ? (.02 + .01 / t) * Math.sin(50 * t) : (.02 - .01 / t) * Math.sin(50 * t) + 1 }\n    }\n  }\n}\n","export default class Canvas {\n  constructor(config = {}) {\n    this.width = config.width || 600\n    this.height = config.height || 600\n    this.bgColor = config.bgColor || '#000'\n    this.fps = config.fps || 60\n    this.hook = config.hook\n\n    this.appendToBody()\n\n    this.canvas = document.querySelector('canvas')\n    this.ctx = this.canvas.getContext(\"2d\")\n    this.canvasPosition = this.canvas.getBoundingClientRect()\n    this.stop = false\n  }\n\n  appendToBody() {\n    const c = document.createElement('canvas')\n    let appendElement = document.body\n    c.width = this.width\n    c.height = this.height\n    c.style.background = this.bgColor\n\n    if(this.hook) {\n      appendElement = document.querySelector(this.hook)\n    }\n\n    appendElement.append(c)\n  }\n\n  startAnimation(stop = false) {\n    this.stop = stop\n  }\n\n  stopAnimation(stop = true) {\n    this.stop = stop\n  }\n\n  rect({ x, y, width, height, color, strokeWidth, strokeColor, shadow, rotate }) {\n    this.ctx.fillStyle = color;\n\n    if (strokeWidth) {\n      this.ctx.strokeWidth = strokeWidth\n      this.ctx.strokeStyle = strokeColor;\n    }\n\n    if (shadow) {\n      this.addShadow(shadow)\n    }\n\n    if (rotate) {\n      this.ctx.translate(x + width / 2, y + height / 2);\n      this.ctx.rotate(rotate);\n      this.ctx.fillRect(-width / 2, -height / 2, width, height);\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n      return\n    }\n\n    this.ctx.fillRect(x, y, width, height);\n  }\n\n  line({ x1, y1, x2, y2, lineWidth = 1, shadow, color = '#fff' }) {\n    this.ctx.beginPath();\n\n    if (shadow) {\n      this.addShadow(shadow)\n    }\n\n    this.ctx.moveTo(x1, y1);\n    this.ctx.lineTo(x2, y2);\n    this.ctx.lineWidth = lineWidth;\n    this.ctx.strokeStyle = color;\n    this.ctx.stroke();\n    this.ctx.closePath();\n  }\n\n  arc({ x, y, r, color, strokeWidth, strokeColor }) {\n    this.ctx.beginPath();\n    this.ctx.arc(x, y, r, 0, Math.PI * 2, true);\n\n    if (strokeWidth) {\n      this.ctx.stroekeWidth = strokeWidth\n      this.ctx.strokeStyle = strokeColor\n      this.ctx.stroke();\n    }\n\n    if (color) {\n      this.ctx.fillStyle = color;\n      this.ctx.fill();\n    }\n  }\n\n  addShadow({ offsetX = 2, offsetY = 2, blur = 2, color = 'rgba(0, 0, 0, 0.5)' }) {\n    this.ctx.shadowOffsetX = offsetX;\n    this.ctx.shadowOffsetY = offsetY;\n    this.ctx.shadowBlur = blur;\n    this.ctx.shadowColor = color;\n  }\n\n  text({ x, y, fontSize = 12, font = 'serif', color = '#fff', text, center }) {\n    const sizeFactor = fontSize >= 50 ? 1.2 : 0.8 // Todo: refine\n    const textLength = center ? (this.ctx.measureText(text).width / 2) * sizeFactor : 0;\n    this.ctx.font = `${fontSize}px ${font}`;\n    this.ctx.fillStyle = color;\n    this.ctx.fillText(text, x - textLength, y);\n  }\n\n  init(time = 0) {\n    this.time = time\n\n    if (!this.stop) {\n      this.ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n      this.render(time)\n\n      setTimeout(() => {\n        window.requestAnimationFrame(this.init.bind(this));\n      }, 1000 / this.fps);\n    }\n  }\n\n  render(time) {\n    // extend Canvas and overwrite\n  }\n}\n\n\n// img.setAttribute('width', '100%');\n// img.setAttribute('height', '100%');","import Calc from './Calc'\nimport Canvas from './Canvas'\nimport Vector from './Vector'\n\nexport {\n  Calc,\n  Canvas,\n  Vector\n}","export class Particle {\n  constructor(morningstar, position, velocity, acceleration, angle) {\n    this.ctx = morningstar.ctx\n    this.ms = morningstar\n    this._position = position\n    this.velocity = velocity\n    this.acc = acceleration\n    this.alpha = 1\n    this.angle = angle\n  }\n\n  setColor(color) {\n    return color\n  }\n\n  set position(position) {\n    const { z } = position\n    if (z > 5) {\n      position.z = 3\n    }\n    this._position = position\n  }\n\n  get position() {\n    return this._position\n  }\n}\n\nexport class SquareParticle extends Particle {\n  constructor(morningstar, position, width, height, color, velocity, acceleration, angle) {\n    super(morningstar, position, velocity, acceleration, angle)\n    this.width = width\n    this.height = height\n    this.color = color\n  }\n\n  render() {\n    const { position, width, height, color, alpha, angle, velocity } = this\n    this.ms.rect({ ...position, width, height, color: `rgba(100, 100, 0, ${alpha})` })\n    this.alpha -= 0.01\n\n    this.position.x = this.position.x + Math.cos(angle) * velocity\n    this.position.y = this.position.y + Math.sin(angle) * velocity\n\n    this.velocity += this.acc\n  }\n}\n\nexport class CircleParticle extends Particle {\n  constructor(morningstar, position, r, velocity, acceleration, angle) {\n    super(morningstar, position, velocity, acceleration, angle)\n    this.r = r\n  }\n\n  render(time) {\n    const { position, r, alpha, angle, velocity } = this\n    const radius = Math.sin(time / 200) + r\n\n    this.ms.arc({ ...position, r: radius, color: `rgba(255, 100, 0, ${alpha})` })\n    this.alpha -= 0.01\n\n    this.position.x = this.position.x + Math.cos(angle) * velocity\n    this.position.y = this.position.y + Math.sin(angle) * velocity\n\n    this.velocity += this.acc\n  }\n}","import { Canvas, Calc } from '../src'\nimport { SquareParticle } from './classes/Particle'\n\nclass Circle {\n  constructor(morningstar, pos, r, vel, acc, angle, color) {\n    this.ctx = morningstar.ctx\n    this.ms = morningstar\n    this.x = pos.x\n    this.y = pos.y\n    this.velocity = vel\n    this.acceleration = acc\n    this.r = r\n    this.angle = angle\n    this.color = color\n  }\n\n  circleCollisionPoint(x1, y1, r1, x2, y2, r2) {\n    const collisionPointX = ((x1 * r2) + (x2 * r1)) / (r1 + r2);\n    const collisionPointY = ((y1 * r2) + (y2 * r1)) / (r1 + r2);\n\n    return [collisionPointX, collisionPointY]\n  }\n\n  collision() {\n    for (const circle of this.ms.circles) {\n      if (circle === this) break\n      if (this.movingCircleCollision(this, circle)) {\n        return circle\n      }\n    }\n\n    return false\n  }\n\n  circlesCollide(x1, y1, r1, x2, y2, r2) {\n    const dx = x2 - x1;\n    const dy = y2 - y1;\n    const radii = r1 + r2;\n\n    return ((dx * dx) + (dy * dy) < radii * radii)\n  }\n\n  movingCircleCollision(c1, c2) {\n    let combinedRadii,\n      overlap,\n      xSide,\n      ySide,\n      s = {},\n      p1A = {},\n      p1B = {},\n      p2A = {},\n      p2B = {};\n\n    c1.mass = c1.mass || 1;\n    c2.mass = c2.mass || 1;\n    c1.vx = c1.x + Math.cos(c1.angle) * c1.velocity\n    c1.vy = c1.y + Math.sin(c1.angle) * c1.velocity\n    c2.vx = c2.x + Math.cos(c2.angle) * c2.velocity\n    c2.vy = c2.y + Math.sin(c2.angle) * c2.velocity\n\n    s.vx = c2.x - c1.x;\n    s.vy = c2.y - c1.y;\n\n    s.magnitude = Math.sqrt(s.vx * s.vx + s.vy * s.vy);\n    combinedRadii = c1.r + c2.r;\n\n    if (s.magnitude < combinedRadii) {\n      overlap = combinedRadii - s.magnitude;\n      overlap += 0.3;\n\n      // Normalize vector\n      s.dx = s.vx / s.magnitude;\n      s.dy = s.vy / s.magnitude;\n\n      s.vxHalf = Math.abs(s.dx * overlap / 2);\n      s.vyHalf = Math.abs(s.dy * overlap / 2);\n\n      c1.x > c2.x ? (xSide = 1) : (xSide = -1);\n      c1.y > c2.y ? (ySide = 1) : (ySide = -1);\n\n      c1.x = c1.x + s.vxHalf * xSide;\n      c1.y = c1.y + s.vyHalf * ySide;\n\n      c2.x = c2.x + s.vxHalf * -xSide;\n      c2.y = c2.y + s.vyHalf * -ySide;\n\n      s.lx = s.vy;\n      s.ly = -s.vx;\n\n      let dp1 = c1.vx * s.dx + c1.vy * s.dy;\n      p1A.x = dp1 * s.dx;\n      p1A.y = dp1 * s.dy;\n\n      let dp2 = c1.vx * (s.lx / s.magnitude) + c1.vy * (s.ly / s.magnitude);\n      p1B.x = dp2 * (s.lx / s.magnitude);\n      p1B.y = dp2 * (s.ly / s.magnitude);\n\n      let dp3 = c2.vx * s.dx + c2.vy * s.dy;\n      p2A.x = dp3 * s.dx;\n      p2A.y = dp3 * s.dy;\n\n      let dp4 = c2.vx * (s.lx / s.magnitude) + c2.vy * (s.ly / s.magnitude);\n      p2B.x = dp4 * (s.lx / s.magnitude);\n      p2B.y = dp4 * (s.ly / s.magnitude);\n\n      c1.bounce = {};\n      c1.bounce.x = p1B.x + p2A.x;\n      c1.bounce.y = p1B.y + p2A.y;\n\n      c2.bounce = {};\n      c2.bounce.x = p1A.x + p2B.x;\n      c2.bounce.y = p1A.y + p2B.y;\n\n      const vx = c1.bounce.x / c1.mass;\n      const vy = c1.bounce.y / c1.mass;\n      const vx2 = c2.bounce.x / c2.mass;\n      const vy2 = c2.bounce.y / c2.mass;\n      const deltaX = vx - c1.x;\n      const deltaY = vy - c1.y;\n      const deltaX2 = vx2 - c2.x;\n      const deltaY2 = vy2 - c2.y;\n      c2.angle = Math.atan2(deltaY, deltaX);\n      c1.angle = Math.atan2(deltaY2, deltaX2);\n\n      return true;\n    }\n  }\n\n  update() {\n    const { ms, x, y, r: r } = this\n    const collidedCircle = this.collision()\n\n    if (collidedCircle) {\n      const { x: x2, y: y2, r: r2 } = collidedCircle\n      console.log('hit')\n\n      // EXPLODE\n      const [collisionX, collisionY] = this.circleCollisionPoint(x, y, r, x2, y2, r2)\n      ms.createParticles(collisionX, collisionY)\n\n      collidedCircle.r = collidedCircle.r / 2\n      this.r = this.r / 2\n\n      // this.ms.stopAnimation()\n    }\n  }\n\n  reflectionAngleLeftRight(angle) {\n    return Math.PI - angle\n  }\n\n  reflectionAngleTopBottom(angle) {\n    return -angle\n  }\n\n  render() {\n    const { x, y, r: r, velocity, angle } = this\n    this.x = x + Math.cos(angle) * velocity\n    this.y = y + Math.sin(angle) * velocity\n\n    if (this.x > this.ms.canvas.width - r) {\n      this.angle = this.reflectionAngleLeftRight(angle)\n    }\n\n    if (this.x < r) {\n      this.angle = this.reflectionAngleLeftRight(angle)\n    }\n\n    if (this.y > this.ms.canvas.height - r) {\n      this.angle = this.reflectionAngleTopBottom(angle)\n    }\n\n    if (this.y < r) {\n      this.angle = this.reflectionAngleTopBottom(angle)\n    }\n\n    this.ms.arc({ x, y, r, color: this.color })\n  }\n}\n\nclass Circles extends Canvas {\n  constructor() {\n    super({ fps: 60, bgColor: 'rgb(50, 50, 50)', width: 800, height: 600, hook: '.main' })\n\n    this.circles = []\n    this.particles = []\n    this.colors = [\n      'rgb(200, 148, 82)',\n      'rgb(193, 200, 82)',\n      'rgb(134, 200, 82)',\n      'rgb(82, 200, 89)',\n      'rgb(82, 200, 148)',\n      'rgb(82, 193, 200)',\n    ]\n\n    this.createCircles()\n\n    this.init()\n  }\n\n  bg() {\n    var grd = this.ctx.createLinearGradient(0, this.canvas.height, 0, 0);\n    grd.addColorStop(0, \"#1f3342\");\n    grd.addColorStop(1, \"black\");\n\n    this.ctx.fillStyle = grd;\n    this.ctx.fillRect(0, 0, this.canvas.width, this.canvas.height);\n  }\n\n  createCircles() {\n    for (let i = 0; i < 20; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const r = Calc.random(10, 20)\n      const pos = Calc.createVector(Calc.random(r, this.width - r), Calc.random(r, this.height - r))\n      const velocity = Calc.random(5, 10)\n      const acceleration = Math.random()\n      const color = Calc.random(0, 5)\n      this.circles.push(new Circle(this, pos, r, velocity, acceleration, angle, this.colors[color]))\n    }\n  }\n\n  createParticles(x, y) {\n    for (let i = 0; i < 100; i++) {\n      const angle = Math.random() * Math.PI * 2;\n      const velocity = Math.random()\n      const acceleration = Math.random() / 50\n      const vx = x + Math.cos(angle) * velocity\n      const vy = y + Math.sin(angle) * velocity\n      const r = Calc.random(1, 5)\n\n      this.particles.push(new SquareParticle(this, Calc.create3DVector(vx, vy), r, r, 'red', velocity, acceleration, angle))\n    }\n  }\n\n  render() {\n    this.bg()\n\n    for (const circle of this.circles) {\n      if(circle.r < 1) {\n        this.circles.splice(circle, 1)\n        continue\n      }\n\n      circle.render()\n    }\n\n    for (const circle of this.circles) {\n      circle.update(this.circles)\n    }\n\n    for (const particle of this.particles) {\n      if (particle.alpha <= 0) {\n        this.particles.splice(particle, 1)\n        continue\n      }\n\n      particle.render()\n    }\n  }\n}\n\nnew Circles\n"]}